--------------------------Client Side Hooks---------------------

pre-commit: 
This hook runs before a commit is made. 
It's commonly used for tasks like linting code, running static analysis tools, or checking for any potential issues that could be caught before committing.

commit-msg: 
This hook is triggered after entering a commit message but before the commit is finalized. 
It can be used to enforce commit message conventions or perform additional checks on the commit message.

pre-push: 
This hook runs before a push to a remote repository is executed. 
It's often used for running tests, ensuring the codebase is in a good state before pushing changes, or preventing certain actions based on pre-defined criteria.

prepare-commit-msg: 
This hook is executed before the commit message is presented to the user. 
It allows for dynamic modification or pre-filling of the commit message based on specific conditions or project requirements.

post-commit: 
This hook runs after a commit is completed. 
It can be used for tasks like triggering notifications, updating documentation, or performing other actions that should happen after a successful commit.

post-merge: 
This hook is triggered after a successful merge operation. 
It can be used to perform tasks such as updating dependencies, rebuilding project configurations, or any other actions required after merging changes.

pre-rebase – executes before rebasing.

post-checkout – executes after running git checkout

-----------------Server-side hooks--------------

Server-side hooks work a bit differently than client-side hooks. 
We need to put them in our server-side repository, and they run before and after pushes.

Pre-receive
The pre-receive hook runs every time someone pushes commits to the repository. 
We can return a non-zero code from our script if we don’t like anything about the contents of the commit. 
The pre-receive hook receives a list of references pushed to the server.

Update
The update hook runs after pre-receive and is quite similar. 
This hook doesn’t get a complete list of references pushed to the server. 
Instead, the hook is called separately for each branch pushed by the user. 
It receives three arguments:

the name of the branch,
the hash of the commit before the push,
the hash of the commit the user is pushing.
The update hook has an advantage over pre-receive. 
If the user is pushing to multiple branches, we can approve some of those while rejecting the others.

Post-receive
The post-receive hook runs after the entire process of pushing is finished. 
It is a fitting place to send notifications. For example, we can have a bot that messages us every time someone pushes changes to the master branch. 
The post-receive hook also gets a complete list of references pushed to the server.